{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dawon\\\\github\\\\react-ts\\\\src\\\\SampleContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useReducer, useContext, createContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SampleStateContext = /*#__PURE__*/createContext(null);\nconst SampleDispatchContext = /*#__PURE__*/createContext(null);\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET_COUNT':\n      return { ...state,\n        count: action.count // count가 자동완성\n\n      };\n\n    case 'SET_TEXT':\n      return { ...state,\n        text: action.text // text가 자동완성\n\n      };\n\n    case 'SET_COLOR':\n      return { ...state,\n        color: action.color // color 가 자동완성\n\n      };\n\n    case 'TOGGLE_GOOD':\n      return { ...state,\n        isGood: !state.isGood\n      };\n\n    default:\n      throw new Error('Unhandled action');\n  }\n} // SampleProvider 에서 useReduer를 사용하고\n// SampleStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환\n\n\nexport function SampleProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, {\n    count: 0,\n    text: 'hello',\n    color: 'red',\n    isGood: true\n  });\n  return /*#__PURE__*/_jsxDEV(SampleStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(SampleDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n} // state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\n//throw new Error 해줘\n\n_s(SampleProvider, \"hmleK4/T+Z3gPb7zJIVoJ6zMg1U=\");\n\n_c = SampleProvider;\nexport function useSampleState() {\n  _s2();\n\n  const state = useContext(SampleStateContext);\n  if (!state) throw new Error('Cannot find SampleProvider'); // 유효하지 않을땐 에러를 발생\n\n  return state;\n}\n\n_s2(useSampleState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useSampleDispatch() {\n  _s3();\n\n  const dispatch = useContext(SampleDispatchContext);\n  if (!dispatch) throw new Error('Cannot find SampleProvider'); // 유효하지 않을땐 에러를 발생\n\n  return dispatch;\n}\n\n_s3(useSampleDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"SampleProvider\");","map":{"version":3,"names":["React","useReducer","useContext","createContext","SampleStateContext","SampleDispatchContext","reducer","state","action","type","count","text","color","isGood","Error","SampleProvider","children","dispatch","useSampleState","useSampleDispatch"],"sources":["C:/Users/dawon/github/react-ts/src/SampleContext.tsx"],"sourcesContent":["import React, { useReducer, useContext, createContext, Dispatch } from 'react';\r\n\r\n\r\ntype Color = 'red' | 'orange' | 'yellow';\r\ntype State = {\r\n  count: number;\r\n  text: string;\r\n  color: Color;\r\n  isGood: boolean;\r\n};\r\ntype Action =\r\n  | { type: 'SET_COUNT'; count: number }\r\n  | { type: 'SET_TEXT'; text: string }\r\n  | { type: 'SET_COLOR'; color: Color }\r\n  | { type: 'TOGGLE_GOOD' };\r\n\r\n// 액션들의 타입을 Dispatch 의 Generics로 설정\r\ntype SampleDispatch = Dispatch<Action>;\r\n\r\nconst SampleStateContext = createContext<State | null>(null);\r\nconst SampleDispatchContext = createContext<SampleDispatch | null>(null);\r\n\r\nfunction reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case 'SET_COUNT':\r\n      return {\r\n        ...state,\r\n        count: action.count // count가 자동완성\r\n      };\r\n    case 'SET_TEXT':\r\n      return {\r\n        ...state,\r\n        text: action.text // text가 자동완성\r\n      };\r\n    case 'SET_COLOR':\r\n      return {\r\n        ...state,\r\n        color: action.color // color 가 자동완성\r\n      };\r\n    case 'TOGGLE_GOOD':\r\n      return {\r\n        ...state,\r\n        isGood: !state.isGood\r\n      };\r\n    default:\r\n      throw new Error('Unhandled action');\r\n  }\r\n}\r\n\r\n// SampleProvider 에서 useReduer를 사용하고\r\n// SampleStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환\r\nexport function SampleProvider({ children }: { children: React.ReactNode }) {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    count: 0,\r\n    text: 'hello',\r\n    color: 'red',\r\n    isGood: true\r\n  });\r\n\r\n  return (\r\n    <SampleStateContext.Provider value={state}>\r\n      <SampleDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </SampleDispatchContext.Provider>\r\n    </SampleStateContext.Provider>\r\n  );\r\n}\r\n\r\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\r\n//throw new Error 해줘\r\nexport function useSampleState() {\r\n  const state = useContext(SampleStateContext);\r\n  if (!state) throw new Error('Cannot find SampleProvider'); // 유효하지 않을땐 에러를 발생\r\n  return state;\r\n}\r\n\r\nexport function useSampleDispatch() {\r\n  const dispatch = useContext(SampleDispatchContext);\r\n  if (!dispatch) throw new Error('Cannot find SampleProvider'); // 유효하지 않을땐 에러를 발생\r\n  return dispatch;\r\n}"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,aAAxC,QAAuE,OAAvE;;AAmBA,MAAMC,kBAAkB,gBAAGD,aAAa,CAAe,IAAf,CAAxC;AACA,MAAME,qBAAqB,gBAAGF,aAAa,CAAwB,IAAxB,CAA3C;;AAEA,SAASG,OAAT,CAAiBC,KAAjB,EAA+BC,MAA/B,EAAsD;EACpD,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,WAAL;MACE,OAAO,EACL,GAAGF,KADE;QAELG,KAAK,EAAEF,MAAM,CAACE,KAFT,CAEe;;MAFf,CAAP;;IAIF,KAAK,UAAL;MACE,OAAO,EACL,GAAGH,KADE;QAELI,IAAI,EAAEH,MAAM,CAACG,IAFR,CAEa;;MAFb,CAAP;;IAIF,KAAK,WAAL;MACE,OAAO,EACL,GAAGJ,KADE;QAELK,KAAK,EAAEJ,MAAM,CAACI,KAFT,CAEe;;MAFf,CAAP;;IAIF,KAAK,aAAL;MACE,OAAO,EACL,GAAGL,KADE;QAELM,MAAM,EAAE,CAACN,KAAK,CAACM;MAFV,CAAP;;IAIF;MACE,MAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;EAtBJ;AAwBD,C,CAED;AACA;;;AACA,OAAO,SAASC,cAAT,OAAqE;EAAA;;EAAA,IAA7C;IAAEC;EAAF,CAA6C;EAC1E,MAAM,CAACT,KAAD,EAAQU,QAAR,IAAoBhB,UAAU,CAACK,OAAD,EAAU;IAC5CI,KAAK,EAAE,CADqC;IAE5CC,IAAI,EAAE,OAFsC;IAG5CC,KAAK,EAAE,KAHqC;IAI5CC,MAAM,EAAE;EAJoC,CAAV,CAApC;EAOA,oBACE,QAAC,kBAAD,CAAoB,QAApB;IAA6B,KAAK,EAAEN,KAApC;IAAA,uBACE,QAAC,qBAAD,CAAuB,QAAvB;MAAgC,KAAK,EAAEU,QAAvC;MAAA,UACGD;IADH;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,C,CAED;AACA;;GAlBgBD,c;;KAAAA,c;AAmBhB,OAAO,SAASG,cAAT,GAA0B;EAAA;;EAC/B,MAAMX,KAAK,GAAGL,UAAU,CAACE,kBAAD,CAAxB;EACA,IAAI,CAACG,KAAL,EAAY,MAAM,IAAIO,KAAJ,CAAU,4BAAV,CAAN,CAFmB,CAE4B;;EAC3D,OAAOP,KAAP;AACD;;IAJeW,c;;AAMhB,OAAO,SAASC,iBAAT,GAA6B;EAAA;;EAClC,MAAMF,QAAQ,GAAGf,UAAU,CAACG,qBAAD,CAA3B;EACA,IAAI,CAACY,QAAL,EAAe,MAAM,IAAIH,KAAJ,CAAU,4BAAV,CAAN,CAFmB,CAE4B;;EAC9D,OAAOG,QAAP;AACD;;IAJeE,iB"},"metadata":{},"sourceType":"module"}